language: python

before_install:

  - pip install awscli
  - chmod +x create_route53_alias.sh
  - chmod +x create_alb_listener_rules.sh
  - chmod +x create_task_definitions.sh
  - chmod +x create_ecs_service.sh

jobs:

  include:

  - stage: build and push app docker image to aws ecr

    script:

      - echo `aws --version`

      - echo Logging in to Amazon ECR...

      - eval $(aws ecr get-login --no-include-email)

      - echo Entered the build phase...

      - docker build -t $python_NAME:$TRAVIS_BRANCH . --target app-python

      - echo Tag and Push the docker images to aws ecr...

      - docker tag $python_NAME:$TRAVIS_BRANCH $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$python_NAME:$TRAVIS_BRANCH

      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$python_NAME:$TRAVIS_BRANCH

      - docker build -t $redis_NAME:$TRAVIS_BRANCH . --target app-redis

      - docker tag $redis_NAME:$TRAVIS_BRANCH $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$redis_NAME:$TRAVIS_BRANCH

      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$redis_NAME:$TRAVIS_BRANCH

  - stage: run ap tests

    script: echo "Test1 Finish"

  - stage: Deploy app to aws ecs...

    script:

      - echo Updating aws ecs task definitions... 

      - ./create_task_definitions.sh

      - ./create_alb_listener_rules.sh

      - ./create_ecs_service.sh

      - ./create_route53_alias.sh
      
      

notifications:

  slack:

    on_pull_requests: true

    rooms:
     - juwai:fbVrH3u9xkfC95YsIFFsCcbO

    on_success: always # default: always

    on_failure: always # default: always
